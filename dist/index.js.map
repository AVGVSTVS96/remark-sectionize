{"version":3,"sources":["../index.ts"],"sourcesContent":["import { findAfter } from \"unist-util-find-after\";\nimport { visit, type BuildVisitor } from \"unist-util-visit\";\nimport type { Node, Parent } from \"unist\";\nimport type { Transformer } from \"unified\";\n\nconst MAX_HEADING_DEPTH = 6;\n\ninterface HeadingNode extends Node {\n  type: \"heading\";\n  depth: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\ninterface SectionNode extends Parent {\n  type: \"section\";\n  depth: number;\n  data: {\n    hName: \"section\";\n  };\n}\n\ntype GenericNode = Node | HeadingNode | SectionNode;\n\nfunction plugin(): Transformer<GenericNode, GenericNode> {\n  return transform;\n}\ntype Test = (node: GenericNode) => boolean;\n\nfunction transform(tree: GenericNode): GenericNode {\n  for (let depth = MAX_HEADING_DEPTH; depth > 0; depth--) {\n    visit(\n      tree,\n      (node): node is HeadingNode =>\n        node.type === \"heading\" &&\n        \"depth\" in node &&\n        typeof node.depth === \"number\" &&\n        node.depth === depth,\n      sectionize as unknown as BuildVisitor<GenericNode, Test>\n    );\n  }\n  return tree;\n}\n\nfunction sectionize(node: HeadingNode, index: number, parent: Parent): void {\n  const start = node;\n  const startIndex = index;\n  const depth = start.depth;\n\n  const isEnd = (node: GenericNode): boolean =>\n    (node.type === \"heading\" && \"depth\" in node && node.depth <= depth) ||\n    node.type === \"export\";\n  const end = findAfter(parent, start, isEnd);\n  const endIndex = end ? parent.children.indexOf(end) : parent.children.length;\n\n  const between = parent.children.slice(\n    startIndex,\n    endIndex > 0 ? endIndex : undefined\n  );\n\n  const section: SectionNode = {\n    type: \"section\",\n    depth: depth,\n    children: between,\n    data: {\n      hName: \"section\",\n    },\n  };\n\n  parent.children.splice(startIndex, section.children.length, section);\n}\n\nexport default plugin;\n"],"mappings":"AAAA,OAAS,aAAAA,MAAiB,wBAC1B,OAAS,SAAAC,MAAgC,mBAIzC,IAAMC,EAAoB,EAiB1B,SAASC,GAAgD,CACvD,OAAOC,CACT,CAGA,SAASA,EAAUC,EAAgC,CACjD,QAASC,EAAQJ,EAAmBI,EAAQ,EAAGA,IAC7CL,EACEI,EACCE,GACCA,EAAK,OAAS,WACd,UAAWA,GACX,OAAOA,EAAK,OAAU,UACtBA,EAAK,QAAUD,EACjBE,CACF,EAEF,OAAOH,CACT,CAEA,SAASG,EAAWD,EAAmBE,EAAeC,EAAsB,CAC1E,IAAMC,EAAQJ,EACRK,EAAaH,EACbH,EAAQK,EAAM,MAKdE,EAAMb,EAAUU,EAAQC,EAHfJ,GACZA,EAAK,OAAS,WAAa,UAAWA,GAAQA,EAAK,OAASD,GAC7DC,EAAK,OAAS,QAC0B,EACpCO,EAAWD,EAAMH,EAAO,SAAS,QAAQG,CAAG,EAAIH,EAAO,SAAS,OAEhEK,EAAUL,EAAO,SAAS,MAC9BE,EACAE,EAAW,EAAIA,EAAW,MAC5B,EAEME,EAAuB,CAC3B,KAAM,UACN,MAAOV,EACP,SAAUS,EACV,KAAM,CACJ,MAAO,SACT,CACF,EAEAL,EAAO,SAAS,OAAOE,EAAYI,EAAQ,SAAS,OAAQA,CAAO,CACrE,CAEA,IAAOC,EAAQd","names":["findAfter","visit","MAX_HEADING_DEPTH","plugin","transform","tree","depth","node","sectionize","index","parent","start","startIndex","end","endIndex","between","section","remark_sectionize_default"]}